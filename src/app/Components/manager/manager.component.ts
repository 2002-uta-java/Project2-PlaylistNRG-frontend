import { Component, OnInit, Input } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-manager',
  templateUrl: './manager.component.html',
  styleUrls: ['./manager.component.css'],
  styles: [
    `
  :host >>> .alert-md-local {
    position:fixed;
    top: 0;
    left: 50%;
    background-color: #00CC66;
    border-color: #0F1020;
    color: #000000;
    width: 35%;
    transform: translate(-50%, 0);
    text-align: center;
  }
  `
  ]
})
export class ManagerComponent implements OnInit {
  @Input() role: string;
  @Input() teamTracks;
  requests = [];
  results: any;
  group: object;
  user: object;
  auth: string;
  playlist = {
    url: "",
    id: 0
  };
  showAlert = false;
  constructor(private http: HttpClient) {
    this.group = JSON.parse(localStorage.getItem("group"));
    this.http.get("http://ec2-18-191-161-102.us-east-2.compute.amazonaws.com:8090/PlaylistNRG/request/"
      + this.group["id"]).subscribe((response) => {
        this.auth = localStorage.getItem("Authorization");
        this.user = JSON.parse(localStorage.getItem("user"));
        for (let request of response["RequestedTracks"]) {
          this.getUserById(request["employeeId"]).then((userResponse) => {
            this.getRequestedTrackInfo(userResponse["User"].spotifyId, request, this.auth).then((results) => {
              let [user, track] = results;
              this.requests = [...this.requests, {
                employeeName: [user["display_name"]],
                artist: track["artists"][0].name,
                title: track["name"],
                status: request["status"],
                requestId: request["id"],
                popularity: track["popularity"],
                spotifyId: track["id"],
                employeeId: userResponse["User"].id,
                uri: track["uri"],
                thumbnail: track["album"].images[1].url,
              }]
            });
          })
        }
      })
  }

  ngOnInit(): void {
  }

  updateSongRequest(index, status: string) {
    this.requests[index].status = status;
    if (status === "Approved") {
      this.teamTracks = [this.requests[index],...this.teamTracks];
    }
    let request = this.requests[index];
    this.http.put("http://ec2-18-191-161-102.us-east-2.compute.amazonaws.com:8090/PlaylistNRG/request/"
      + request["requestId"], {
      employeeId: request["employeeId"],
      spotifyPopularity: request["popularity"],
      spotifyTrackId: request["spotifyId"],
      status: status,
    }).subscribe();
  }

  createPlaylist() {
    
    //create playlist in spotify
    this.http.post("https://api.spotify.com/v1/users/" + this.user["id"] + "/playlists",
      {
        name: this.group["name"] + " PlaylistNRG",
        description: "A playlist auto-generated by PlaylistNRG for " + this.group["name"] + "."
      },
      {
        headers:
          { 'Authorization': 'Bearer ' + this.auth }
      }
    ).subscribe((response) => {
      this.playlist = {
        url: response["external_urls"].spotify,
        id: response["id"]
      };
      //add tracks to playlist
      this.http.post("https://api.spotify.com/v1/playlists/"+ this.playlist["id"] +"/tracks",
        {
            uris: this.teamTracks.map((track)=>{
              return track["uri"]
            }).slice(0,10)
        },
        {
          headers:
            { 'Authorization': 'Bearer ' + this.auth }
        }
      ).subscribe(()=>{
        this.showAlert = true;
      });
    })
  }

  async getSpotifyTrack(trackId, auth) {
    return await this.http.get("https://api.spotify.com/v1/tracks/" + trackId, {
      headers:
        { 'Authorization': 'Bearer ' + auth }
    }).toPromise();
  }

  async getSpotifyUserById(id, auth) {
    return await this.http.get("https://api.spotify.com/v1/users/"
      + id, {
      headers:
        { 'Authorization': 'Bearer ' + auth }
    }).toPromise();
  }

  async getRequestedTrackInfo(id, request, auth) {
    return await Promise.all([
      this.getSpotifyUserById(id, auth),
      this.getSpotifyTrack(request["spotifyTrackId"], auth)
    ]);
  }

  async getUserById(id) {
    return await this.http.get("http://ec2-18-191-161-102.us-east-2.compute.amazonaws.com:8090/PlaylistNRG/user/"
      + id).toPromise();
  }
}
